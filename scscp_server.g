#############################################################################
#
# This is the SCSCP server configuration file.
# The service provider can start the server just by the command 
# $ gap myserver.g
#
#############################################################################

#############################################################################
#
# Load necessary packages and read external files. 
# Put here and other commands if needed.
#
#############################################################################

LogTo(); # to close log file if it was opened from .gaprc
LoadPackage("scscp");
LoadPackage("factint");
LoadPackage("anupq");
LoadPackage("cvec");

#############################################################################
#
# Procedures and functions available for the SCSCP server
# (you can also install procedures contained in other files,
# including standard GAP procedures and functions) by adding
# appropriate calls to InstallSCSCPprocedure below.
#
#############################################################################

# Simple procedures for tests and demos
InstallSCSCPprocedure( "Identity", x -> x, "Identity procedure for tests", 1, 1 );
InstallSCSCPprocedure( "IsPrimeInt", IsPrimeInt, 1, 1 );
InstallSCSCPprocedure( "Factorial", Factorial, "See ?Factorial in GAP", 1, 1 );
InstallSCSCPprocedure( "Phi", Phi, "Euler's totient function, see ?Phi in GAP", 1, 1 );
InstallSCSCPprocedure( "Addition", function(a,b) return a+b; end, "to add two objects", 2, 2 );
InstallSCSCPprocedure( "Multiplication", function(a,b) return a*b; end, "to multiply two objects", 2, 2 );
InstallSCSCPprocedure( "Length", Length, 1, 1 );
InstallSCSCPprocedure( "Size", Size, 1, 1 );
InstallSCSCPprocedure( "Determinant", Determinant );
InstallSCSCPprocedure( "NrConjugacyClasses", NrConjugacyClasses, 1, 1 );
InstallSCSCPprocedure( "SylowSubgroup", SylowSubgroup, 2, 2 );

# Group identification in the GAP small group library

#############################################################################
#
# IdGroupByGenerators( <list of permutations> )
#
# Returns the number of the group, generated by given permutations,
# in the GAP Small Groups Library.
#
IdGroupByGenerators:=function( permlist )
return IdGroup( Group( permlist ) );
end;

InstallSCSCPprocedure( "GroupIdentification", IdGroupByGenerators, 
        "Accepts a list of permutations and returns IdGroup of the group they generate", 1, infinity );
InstallSCSCPprocedure( "IdGroup", IdGroup, "See ?IdGroup in GAP", 1, 1 );

###########################################################################
#
# IdGroup512ByCode( <pcgs code of the group> )
# 
# The function accepts the integer number that is the code for pcgs of 
# a group of order 512 and returns the number of this group in the
# GAP Small Groups library. It is assumed that the client will make sure
# that the code really corresponds to the group of order 512, since this
# can not be checked from the code itself.
#
# This function requires ANUPQ package for IdStandardPresented512Group.
#
if ARCH_IS_UNIX() then
  IdGroup512ByCode:=function( code )
  local G, F, H;
  G := PcGroupCode( code, 512 );
  F := PqStandardPresentation( G );
  H := PcGroupFpGroup( F );
  return IdStandardPresented512Group( H );
  end;
  InstallSCSCPprocedure( "IdGroup512ByCode", IdGroup512ByCode, 
          "Identification of groups of order 512 using the ANUPQ package", 1, 1 );
fi;
        
# GAP group libraries
InstallSCSCPprocedure( "AlternatingGroup", AlternatingGroup );
InstallSCSCPprocedure( "SymmetricGroup", SymmetricGroup );
InstallSCSCPprocedure( "SmallGroup", SmallGroup );
InstallSCSCPprocedure( "TransitiveGroup", TransitiveGroup );
InstallSCSCPprocedure( "PrimitiveGroup", PrimitiveGroup );
InstallSCSCPprocedure( "MathieuGroup", MathieuGroup );

# example to show how to control arguments

InstallSCSCPprocedure( "MatrixMultiplication", 
        function(a,b) 
        if not IsMatrix(a) or not IsMatrix(b) then
                Error( "The argument must be a matrix!" );
        else
                return a*b; 
        fi;
        end );

# Lattice of subgroups
InstallSCSCPprocedure( "LatticeSubgroups", LatticeSubgroups, 1, 1 );
        
InstallSCSCPprocedure("ConwayPolynomial", ConwayPolynomial, "See ?ConwayPolynomial in GAP", 2, 2 );

InstallSCSCPprocedure( "AutomorphismGroup", AutomorphismGroup, 1, 1 );

#############################################################################
#
# procedure to test pickling/unpickling from the IO package for data encoding
# 
IO_UnpickleStringAndPickleItBack:=function( picklestr )
  return( IO_PickleToString( IO_UnpickleFromString( picklestr ) ) );
end;

InstallSCSCPprocedure( "IO_UnpickleStringAndPickleItBack", IO_UnpickleStringAndPickleItBack, 
        "To test how pickling format from IO package may be used for data transmitting (see ?IO_Pickle, ?IO_Unpickle)", 1, 1 );

#############################################################################
#
# The database of numbers of isomorphism types of groups of a given order
#
#############################################################################

LoadPackage("gnu");

# InstallSCSCPprocedure( "GnuExplained", GnuExplained, "Number of groups of order n", 1, 1 );
# InstallSCSCPprocedure( "Gnu", Gnu, "Number of groups of order n", 1, 1 );
# InstallSCSCPprocedure( "GnuWishlist", GnuWishlist, "Filter n with unknown gnu(n)", 1, 1 );
# InstallSCSCPprocedure( "NextUnknownGnu", NextUnknownGnu, "Next n with unknown gnu(n)", 1, 1 );

SCSCPserviceName:="GAP-SCSCP-demo-group-numbers";

SCSCPserviceVersion:= Concatenation(
        "GAP ", GAPInfo.Version,
        "; CubeFree ", GAPInfo.PackagesInfo.cubefree[1].Version,
        "; Gnu ", "https://github.com/alex-konovalov/gnu",
        "; GrpConst ", GAPInfo.PackagesInfo.grpconst[1].Version,
        "; SCSCP ", GAPInfo.PackagesInfo.scscp[1].Version,
        "; SglPPow ", GAPInfo.PackagesInfo.sglppow[1].Version );

SCSCPserviceDescription:= 
  "GAP SCSCP demo server with numbers of isomorphism types of finite groups. Server started";

#############################################################################
#
# Finally, we start the SCSCP server. 
#
#############################################################################

RunSCSCPserver( SCSCPserverAddress, 26134);
